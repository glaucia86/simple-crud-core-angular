{
  "_args": [
    [
      "event-source-polyfill@https://registry.npmjs.org/event-source-polyfill/-/event-source-polyfill-0.0.9.tgz",
      "C:\\Users\\Glaucia\\Downloads\\Labs\\simple-crud-core-angular\\ControleFuncionarioApp\\src\\FuncionarioApp"
    ]
  ],
  "_from": "event-source-polyfill@0.0.9",
  "_id": "event-source-polyfill@0.0.9",
  "_inCache": true,
  "_location": "/event-source-polyfill",
  "_phantomChildren": {},
  "_requested": {
    "name": "event-source-polyfill",
    "raw": "event-source-polyfill@https://registry.npmjs.org/event-source-polyfill/-/event-source-polyfill-0.0.9.tgz",
    "rawSpec": "https://registry.npmjs.org/event-source-polyfill/-/event-source-polyfill-0.0.9.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/event-source-polyfill/-/event-source-polyfill-0.0.9.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/event-source-polyfill/-/event-source-polyfill-0.0.9.tgz",
  "_shasum": "18c6205d170ab09db889ffceaa33f0e493f14a50",
  "_shrinkwrap": null,
  "_spec": "event-source-polyfill@https://registry.npmjs.org/event-source-polyfill/-/event-source-polyfill-0.0.9.tgz",
  "_where": "C:\\Users\\Glaucia\\Downloads\\Labs\\simple-crud-core-angular\\ControleFuncionarioApp\\src\\FuncionarioApp",
  "author": {
    "name": "Yaffle",
    "url": "https://github.com/Yaffle"
  },
  "bugs": {
    "url": "https://github.com/Yaffle/EventSource/issues"
  },
  "dependencies": {},
  "description": "A polyfill for http://www.w3.org/TR/eventsource/ ",
  "devDependencies": {
    "grunt": "^0.4.4",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-uglify": "~0.2.4"
  },
  "homepage": "https://github.com/Yaffle/EventSource",
  "keywords": [
    "event-source",
    "eventsource",
    "polyfill",
    "server sent events",
    "sse"
  ],
  "license": "MIT",
  "main": "eventsource.js",
  "name": "event-source-polyfill",
  "optionalDependencies": {},
  "readme": "EventSource polyfill - http://www.w3.org/TR/eventsource/\r\n========================================================\r\n\r\nInstalling:\r\n-----------\r\n\r\nYou can get the code from npm or bower:\r\n\r\n```\r\nnpm install event-source-polyfill\r\n```\r\n\r\n```\r\nbower install event-source-polyfill\r\n```\r\n\r\nJust include `eventsource.js` or `eventsource.min.js` in your page to use the polyfill.\r\n\r\n\r\nBrowser support:\r\n----------------\r\n\r\n* IE 10+, Firefox 3.5+, Chrome 3+, Safari 4+, Opera 12+\r\n* IE 8 - IE 9: XDomainRequest is used internally, which has some limitations (2KB padding is requried, no way to send cookies, no way to use client certificates)\r\n* It works on Mobile Safari, Opera Mobile, Chrome for Android, Firefox for Android\r\n* It does not work on: Android Browser(requires 4 KB padding), Opera Mini\r\n\r\nAdvantages:\r\n-----------\r\n\r\n* Simple server-side code\r\n* Cross-domain requests support\r\n\r\nServer-side requirements:\r\n-------------------------\r\n\r\n* \"Last-Event-ID\" is sent in a query string (CORS + \"Last-Event-ID\" header is not supported by all browsers)\r\n* It is required to send 2 KB padding for IE < 10 and Chrome < 13 at the top of the response stream\r\n* You need to send \"comment\" messages each 15-30 seconds, these messages will be used as heartbeat to detect disconnects - see https://bugzilla.mozilla.org/show_bug.cgi?id=444328\r\n\r\nSpecification:\r\n--------------\r\n\r\n* http://www.w3.org/TR/eventsource/\r\n\r\nBuild:\r\n------\r\n\r\n* To build EventSource, just install npm modules (`npm install`) and then run the build (`npm run build`). It should generate a new version of eventsource.min.js.\r\n\r\nNotes:\r\n-----\r\n * If you are using HTTP Basic Authentication, you can embed credentials into the URL - `http://username:password@github.com`.\r\n\r\nOther EventSource polyfills:\r\n----------------------------\r\n\r\n* https://github.com/remy/polyfills/blob/master/EventSource.js by Remy Sharp\r\n* https://github.com/rwldrn/jquery.eventsource by Rick Waldron\r\n* https://github.com/amvtek/EventSource by AmvTek\r\n\r\nEXAMPLE\r\n-------\r\n\r\n\r\n\r\nserver-side (node.js)\r\n---------------------\r\n\r\n```javascript\r\nvar PORT = 8081;\r\n\r\nvar http = require(\"http\");\r\nvar fs = require(\"fs\");\r\nvar url = require(\"url\");\r\n\r\nhttp.createServer(function (request, response) {\r\n  var parsedURL = url.parse(request.url, true);\r\n  var pathname = parsedURL.pathname;\r\n  if (pathname === \"/events.php\") {\r\n\r\n    response.writeHead(200, {\r\n      \"Content-Type\": \"text/event-stream\",\r\n      \"Cache-Control\": \"no-cache\",\r\n      \"Access-Control-Allow-Origin\": \"*\"\r\n    });\r\n\r\n    var padding = new Array(2049);\r\n    response.write(\":\" + padding.join(\" \") + \"\\n\"); // 2kB padding for IE\r\n    response.write(\"retry: 2000\\n\");\r\n\r\n    var lastEventId = Number(request.headers[\"last-event-id\"]) || Number(parsedURL.query.lastEventId) || 0;\r\n\r\n    var timeoutId = 0;\r\n    var i = lastEventId;\r\n    var c = i + 100;\r\n    var f = function () {\r\n      if (++i < c) {\r\n        response.write(\"id: \" + i + \"\\n\");\r\n        response.write(\"data: \" + i + \"\\n\\n\");\r\n        timeoutId = setTimeout(f, 1000);\r\n      } else {\r\n        response.end();\r\n      }\r\n    };\r\n\r\n    f();\r\n\r\n    response.on(\"close\", function () {\r\n      clearTimeout(timeoutId);\r\n    });\r\n\r\n  } else {\r\n    if (pathname === \"/\") {\r\n      pathname = \"/index.html\";\r\n    }\r\n    if (pathname === \"/index.html\" || pathname === \"../eventsource.js\") {\r\n      response.writeHead(200, {\r\n        \"Content-Type\": pathname === \"/index.html\" ? \"text/html\" : \"text/javascript\"\r\n      });\r\n      response.write(fs.readFileSync(__dirname + pathname));\r\n    }\r\n    response.end();\r\n  }\r\n}).listen(PORT);\r\n```\r\n\r\nor use PHP (see php/events.php)\r\n-------------------------------\r\n```php\r\n<?php\r\n\r\n  header(\"Content-Type: text/event-stream\");\r\n  header(\"Cache-Control: no-cache\");\r\n  header(\"Access-Control-Allow-Origin: *\");\r\n\r\n  $lastEventId = floatval(isset($_SERVER[\"HTTP_LAST_EVENT_ID\"]) ? $_SERVER[\"HTTP_LAST_EVENT_ID\"] : 0);\r\n  if ($lastEventId == 0) {\r\n    $lastEventId = floatval(isset($_GET[\"lastEventId\"]) ? $_GET[\"lastEventId\"] : 0);\r\n  }\r\n\r\n  echo \":\" . str_repeat(\" \", 2048) . \"\\n\"; // 2 kB padding for IE\r\n  echo \"retry: 2000\\n\";\r\n\r\n  // event-stream\r\n  $i = $lastEventId;\r\n  $c = $i + 100;\r\n  while (++$i < $c) {\r\n    echo \"id: \" . $i . \"\\n\";\r\n    echo \"data: \" . $i . \";\\n\\n\";\r\n    ob_flush();\r\n    flush();\r\n    sleep(1);\r\n  }\r\n\r\n?>\r\n```\r\n\r\nindex.html (php/index.html):\r\n----------------------------\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n    <title>EventSource example</title>\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <script src=\"../eventsource.js\"></script>\r\n    <script>\r\n      var es = new EventSource(\"events.php\");\r\n      var listener = function (event) {\r\n        var div = document.createElement(\"div\");\r\n        var type = event.type;\r\n        div.appendChild(document.createTextNode(type + \": \" + (type === \"message\" ? event.data : es.url)));\r\n        document.body.appendChild(div);\r\n      };\r\n      es.addEventListener(\"open\", listener);\r\n      es.addEventListener(\"message\", listener);\r\n      es.addEventListener(\"error\", listener);\r\n    </script>\r\n</head>\r\n<body>\r\n</body>\r\n</html>\r\n```\r\n\r\n\r\nLicense\r\n-------\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2012 vic99999@yandex.ru\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/Yaffle/EventSource.git"
  },
  "scripts": {
    "build": "grunt"
  },
  "version": "0.0.9"
}
