{
  "_args": [
    [
      "awesome-typescript-loader@https://registry.npmjs.org/awesome-typescript-loader/-/awesome-typescript-loader-3.2.1.tgz",
      "C:\\Users\\Glaucia\\Downloads\\Labs\\simple-crud-core-angular\\ControleFuncionarioApp\\src\\FuncionarioApp"
    ]
  ],
  "_from": "awesome-typescript-loader@3.2.1",
  "_id": "awesome-typescript-loader@3.2.1",
  "_inCache": true,
  "_location": "/awesome-typescript-loader",
  "_phantomChildren": {
    "big.js": "3.1.3",
    "emojis-list": "2.1.0",
    "json5": "0.5.1"
  },
  "_requested": {
    "name": "awesome-typescript-loader",
    "raw": "awesome-typescript-loader@https://registry.npmjs.org/awesome-typescript-loader/-/awesome-typescript-loader-3.2.1.tgz",
    "rawSpec": "https://registry.npmjs.org/awesome-typescript-loader/-/awesome-typescript-loader-3.2.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/awesome-typescript-loader/-/awesome-typescript-loader-3.2.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/awesome-typescript-loader/-/awesome-typescript-loader-3.2.1.tgz",
  "_shasum": "600f5d552da3e5501e3e5c19aa3e8986059f8947",
  "_shrinkwrap": null,
  "_spec": "awesome-typescript-loader@https://registry.npmjs.org/awesome-typescript-loader/-/awesome-typescript-loader-3.2.1.tgz",
  "_where": "C:\\Users\\Glaucia\\Downloads\\Labs\\simple-crud-core-angular\\ControleFuncionarioApp\\src\\FuncionarioApp",
  "author": {
    "email": "fnight.m@gmail.com",
    "name": "Stanislav Panferov",
    "url": "http://panferov.me/"
  },
  "bugs": {
    "url": "https://github.com/s-panferov/awesome-typescript-loader/issues"
  },
  "dependencies": {
    "colors": "^1.1.2",
    "enhanced-resolve": "^3.1.0",
    "loader-utils": "^1.1.0",
    "lodash": "^4.17.4",
    "micromatch": "^3.0.3",
    "mkdirp": "^0.5.1",
    "object-assign": "^4.1.1",
    "source-map-support": "^0.4.15"
  },
  "description": "Awesome TS loader for webpack",
  "devDependencies": {
    "@types/chai": "^4.0.1",
    "@types/colors": "^1.1.3",
    "@types/lodash": "^4.14.67",
    "@types/micromatch": "^2.3.29",
    "@types/mocha": "^2.2.41",
    "@types/node": "^8.0.5",
    "@types/shelljs": "^0.7.2",
    "@types/sinon": "^2.3.2",
    "@types/webpack": "^3.0.1",
    "bluebird": "^3.5.0",
    "chai": "^4.0.2",
    "empty-module": "0.0.2",
    "fs-extra": "^3.0.1",
    "mocha": "^3.4.2",
    "ps-node": "^0.1.6",
    "rimraf": "^2.6.1",
    "shelljs": "^0.7.8",
    "standard-version": "^4.2.0",
    "temp": "^0.8.3",
    "tslint": "^5.4.3",
    "typescript": "^2.4.1",
    "webpack": "^2.6.1"
  },
  "homepage": "https://github.com/s-panferov/awesome-typescript-loader",
  "keywords": [
    "loader",
    "typescript",
    "webpack",
    "webpack-loader"
  ],
  "license": "MIT",
  "main": "dist/entry.js",
  "name": "awesome-typescript-loader",
  "optionalDependencies": {},
  "readme": "# The best TypeScript loader for Webpack\n\n[![Join the chat at https://gitter.im/s-panferov/awesome-typescript-loader](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/s-panferov/awesome-typescript-loader?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://travis-ci.org/s-panferov/awesome-typescript-loader.svg?branch=master)](https://travis-ci.org/s-panferov/awesome-typescript-loader)\n\n## Installation\n\n```\nnpm install awesome-typescript-loader --save-dev\n```\n\n## Differences between [`ts-loader`](https://github.com/TypeStrong/ts-loader)\n\n`awesome-typescript-loader` loader was created mostly to speed-up compilation in my own projects.\nSome of them are quite big and I wanted to have full control on how my files are compiled. There are three major points:\n\n1) atl has first-class integration with Babel and enables caching possibilities. This can be useful for those who use Typescript with Babel.\nWhen `useBabel` and `useCache` flags are enabled, typescript's emit will be transpiled with Babel and cached.\nSo next time if source file (+environment) has the same checksum we can totally skip typescript's and babel's transpiling.\nThis significantly reduces build time in this scenario.\n\n2) atl is able to fork type-checker and emitter to a separate process, which also speeds-up some development scenarios (e.g. react with react-hot-loader)\nSo your webpack compilation will end earlier and you can explore compiled version in your browser while your files are typechecked.\n\n## Configuration\n\n1. Add `.ts` as a resolvable extension.\n2. Configure all files with a `.ts` extension to be handled by `awesome-typescript-loader`.\n\n**webpack.config.js**\n\n```javascript\n// `CheckerPlugin` is optional. Use it if you want async error reporting.\n// We need this plugin to detect a `--watch` mode. It may be removed later\n// after https://github.com/webpack/webpack/issues/3460 will be resolved.\nconst { CheckerPlugin } = require('awesome-typescript-loader')\n\nmodule.exports = {\n\n  // Currently we need to add '.ts' to the resolve.extensions array.\n  resolve: {\n    extensions: ['.ts', '.tsx', '.js', '.jsx']\n  },\n\n  // Source maps support ('inline-source-map' also works)\n  devtool: 'source-map',\n\n  // Add the loader for .ts files.\n  module: {\n    loaders: [\n      {\n        test: /\\.tsx?$/,\n        loader: 'awesome-typescript-loader'\n      }\n    ]\n  },\n  plugins: [\n      new CheckerPlugin()\n  ]\n};\n```\n\nAfter that, you will be able to build TypeScript files with webpack.\n\n## NodeJS versions\n\n**The loader supports NodeJS 4 and newer.**\n\n## tsconfig.json\n\nYou can use the tsconfig.json file to configure your compiler and loader:\n\n```\n{\n    \"compilerOptions\": {\n        \"noImplicitAny\": true,\n        \"removeComments\": true\n    },\n    \"awesomeTypescriptLoaderOptions\": {\n        /* ... */\n    }\n}\n```\n\n## Supported TypeScript\n\n`awesome-typescript-loader@2.x` aims to support only `typescript@2.x` and `webpack@2x`, if you need old compilers please use\n`1.x` or `0.x` versions.\n\n## Advanced path resolution in TypeScript 2.0\n\nIf you want to use new `paths` and `baseUrl` feature of TS 2.0 please include `TsConfigPathsPlugin`.\nThis feature is available only for `webpack@2.1`.\n\n```\nconst { TsConfigPathsPlugin } = require('awesome-typescript-loader');\n\nresolve: {\n    plugins: [\n        new TsConfigPathsPlugin(/* { tsconfig, compiler } */)\n    ]\n}\n```\n\n## Loader options\n\n### silent *(boolean) (default=false)*\n\nNo logging from the checker. Please note that this option disables async error reporting because\nthis option bans `console.log()` usage.\n\n### compiler *(string) (default='typescript')*\n\nAllows use of TypeScript compilers other than the official one. Must be\nset to the NPM name of the compiler, e.g. *ntypescript* or the path to a package folder.\nNote that the compiler must be installed in **your** project. You can also use\nnightly versions.\n\n### useTranspileModule (boolean) (default=false)*\n\nUse fast `transpileModule` emit mode. Disables automatically when you set compilerOption `declaration: true` ([reference](https://www.typescriptlang.org/docs/handbook/compiler-options.html)).\n\n### instance *(string) (default='at-loader')*\n\nAllows the use of several TypeScript compilers with different settings in one app. Override `instance` to initialize another instance.\n\n### configFileName *(string) (default='tsconfig.json')*\n\nSpecifies the path to a TS config file. This is useful when you have multiple config files. This setting is useless *inside* a TS config file.\n\n### transpileOnly *(boolean)*\n\nUse this setting to disable type checking.\n\n### ignoreDiagnostics *(number[]) (default=[])*\n\nYou can squelch certain TypeScript errors by specifying an array of [diagnostic codes](https://github.com/Microsoft/TypeScript/blob/master/src/compiler/diagnosticMessages.json) to ignore.\nFor example, you can transpile [stage 1 properties](https://github.com/jeffmo/es-class-fields-and-static-properties) from `*.js` using `\"ignoreDiagnostics\": [8014]`.\n\n### useBabel *(boolean) (default=false)*\n\nInvoke Babel to transpile files. Useful with ES6 target. Please see `useCache` option\nwhich can improve warm-up time.\n\n### babelCore *(string) (default=undefined)*\n\nOverride the path used to find `babel-core`. Useful if `node_modules` is installed in a non-standard place or webpack is being invoked from a directory not at the root of the project.\n\n### babelOptions *(object) (default=null)*\n\nUse this option to pass some options to Babel (e.g. presets). Please note that\n[`.babelrc` file](https://babeljs.io/docs/usage/babelrc/) is more universal way to do this.\n\n### useCache *(boolean) (default=false)*\n\nUse internal file cache. This is useful with Babel, when processing takes a long time to complete. Improves warm-up time.\n\n### usePrecompiledFiles *(boolean) (default=false)*\n\nUse pre-compiled files if any. Files must be named as `{filename}.js` and `{filename}.map`.\n\n### cacheDirectory *(string) (default='.awcache')*\n\nDirectory when cache is stored.\n\n### reportFiles *(string[])*\n\nSpecify [globs](https://github.com/isaacs/minimatch) to report file diagnistics. ALL OTHER ERRORS WILL NOT BE REPORTED. Example:\n\n```\nreportFiles: [\n    \"src/**/*.{ts,tsx}\"\n]\n```\n\n## Compiler options\n\nYou can pass compiler options inside loader query string or in tsconfig file.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/s-panferov/awesome-typescript-loader.git"
  },
  "scripts": {
    "build": "rimraf dist && tsc --pretty",
    "compile": "tsc --pretty",
    "lint": "tslint src/*.ts",
    "prebuild": "npm run lint",
    "prepublish": "npm run build",
    "release": "standard-version",
    "test": "rimraf .test && mocha --timeout 30000 dist/__test__",
    "watch": "npm run watch:ts",
    "watch:ts": "npm run build:ts -- --watch --diagnostics"
  },
  "typings": "./dist/index.d.ts",
  "version": "3.2.1"
}
