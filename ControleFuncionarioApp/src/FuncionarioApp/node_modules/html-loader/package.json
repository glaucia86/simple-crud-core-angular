{
  "_args": [
    [
      "html-loader@https://registry.npmjs.org/html-loader/-/html-loader-0.4.5.tgz",
      "C:\\Users\\Glaucia\\Downloads\\Labs\\simple-crud-core-angular\\ControleFuncionarioApp\\src\\FuncionarioApp"
    ]
  ],
  "_from": "html-loader@0.4.5",
  "_id": "html-loader@0.4.5",
  "_inCache": true,
  "_location": "/html-loader",
  "_phantomChildren": {
    "big.js": "3.1.3",
    "emojis-list": "2.1.0",
    "json5": "0.5.1"
  },
  "_requested": {
    "name": "html-loader",
    "raw": "html-loader@https://registry.npmjs.org/html-loader/-/html-loader-0.4.5.tgz",
    "rawSpec": "https://registry.npmjs.org/html-loader/-/html-loader-0.4.5.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/html-loader/-/html-loader-0.4.5.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/html-loader/-/html-loader-0.4.5.tgz",
  "_shasum": "5fbcd87cd63a5c49a7fce2fe56f425e05729c68c",
  "_shrinkwrap": null,
  "_spec": "html-loader@https://registry.npmjs.org/html-loader/-/html-loader-0.4.5.tgz",
  "_where": "C:\\Users\\Glaucia\\Downloads\\Labs\\simple-crud-core-angular\\ControleFuncionarioApp\\src\\FuncionarioApp",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack/html-loader/issues"
  },
  "dependencies": {
    "es6-templates": "^0.2.2",
    "fastparse": "^1.1.1",
    "html-minifier": "^3.0.1",
    "loader-utils": "^1.0.2",
    "object-assign": "^4.1.0"
  },
  "description": "html loader module for webpack",
  "devDependencies": {
    "beautify-lint": "^1.0.4",
    "codecov.io": "^0.1.6",
    "eslint": "^3.1.1",
    "istanbul": "^0.4.4",
    "js-beautify": "^1.6.3",
    "mocha": "^2.5.3",
    "should": "^10.0.0"
  },
  "homepage": "https://github.com/webpack/html-loader#readme",
  "license": "MIT",
  "name": "html-loader",
  "optionalDependencies": {},
  "readme": "[![npm][npm]][npm-url]\n[![deps][deps]][deps-url]\n[![test][test]][test-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n\n<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://worldvectorlogo.com/logos/html5.svg\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\" vspace=\"\" hspace=\"25\"\n      src=\"https://worldvectorlogo.com/logos/webpack.svg\">\n  </a>\n  <h1>HTML Loader</h1>\n  <p>Exports HTML as string. HTML is minimized when the compiler demands.<p>\n</div>\n\n<h2 align=\"center\">Install</h2>\n\n```bash\nnpm i -D html-loader\n```\n\n<h2 align=\"center\">Usage</h2>\n\nBy default every local `<img src=\"image.png\">` is required (`require('./image.png')`). You may need to specify loaders for images in your configuration (recommended `file-loader` or `url-loader`).\n\nYou can specify which tag-attribute combination should be processed by this loader via the query parameter `attrs`. Pass an array or a space-separated list of `<tag>:<attribute>` combinations. (Default: `attrs=img:src`)\n\nTo completely disable tag-attribute processing (for instance, if you're handling image loading on the client side) you can pass in `attrs=false`.\n\n<h2 align=\"center\">Examples</h2>\n\nWith this configuration:\n\n```js\n{\n  module: {\n    rules: [\n      { test: /\\.jpg$/, use: [ \"file-loader\" ] },\n      { test: /\\.png$/, use: [ \"url-loader?mimetype=image/png\" ] }\n    ]\n  },\n  output: {\n    publicPath: \"http://cdn.example.com/[hash]/\"\n  }\n}\n```\n\n``` html\n<!-- file.html -->\n<img src=\"image.png\" data-src=\"image2x.png\" >\n```\n\n```js\nrequire(\"html-loader!./file.html\");\n\n// => '<img src=\"http://cdn.example.com/49eba9f/a992ca.png\"\n//         data-src=\"image2x.png\">'\n```\n\n```js\nrequire(\"html-loader?attrs=img:data-src!./file.html\");\n\n// => '<img src=\"image.png\" data-src=\"data:image/png;base64,...\" >'\n```\n\n```js\nrequire(\"html-loader?attrs=img:src img:data-src!./file.html\");\nrequire(\"html-loader?attrs[]=img:src&attrs[]=img:data-src!./file.html\");\n\n// => '<img  src=\"http://cdn.example.com/49eba9f/a992ca.png\"        \n//           data-src=\"data:image/png;base64,...\" >'\n```\n\n```js\nrequire(\"html-loader?-attrs!./file.html\");\n\n// => '<img  src=\"image.jpg\"  data-src=\"image2x.png\" >'\n```\n\nminimized by running `webpack --optimize-minimize`\n\n```html\n'<img src=http://cdn.example.com/49eba9f/a9f92ca.jpg\n      data-src=data:image/png;base64,...>'\n```\n\nor specify the `minimize` property in the rule's options in your `webpack.conf.js`\n\n```js\nmodule: {\n  rules: [{\n    test: /\\.html$/,\n    use: [ {\n      loader: 'html-loader',\n      options: {\n        minimize: true\n      }\n    }],\n  }]\n}\n```\n\n### 'Root-relative' URLs\n\nFor urls that start with a `/`, the default behavior is to not translate them.\nIf a `root` query parameter is set, however, it will be prepended to the url\nand then translated.\n\nWith the same configuration as above:\n\n``` html\n<!-- file.html -->\n<img src=\"/image.jpg\">\n```\n\n```js\nrequire(\"html-loader!./file.html\");\n\n// => '<img  src=\"/image.jpg\">'\n```\n\n```js\nrequire(\"html-loader?root=.!./file.html\");\n\n// => '<img  src=\"http://cdn.example.com/49eba9f/a992ca.jpg\">'\n```\n\n### Interpolation\n\nYou can use `interpolate` flag to enable interpolation syntax for ES6 template strings, like so:\n\n```js\nrequire(\"html-loader?interpolate!./file.html\");\n```\n\n```html\n<img src=\"${require(`./images/gallery.png`)}\">\n\n<div>${require('./components/gallery.html')}</div>\n```\nAnd if you only want to use `require` in template and any other `${}` are not to be translated, you can set `interpolate` flag to `require`, like so:\n\n```js\nrequire(\"html-loader?interpolate=require!./file.ftl\");\n```\n\n```html\n\n<#list list as list>\n  <a href=\"${list.href!}\" />${list.name}</a>\n</#list>\n\n<img src=\"${require(`./images/gallery.png`)}\">\n\n<div>${require('./components/gallery.html')}</div>\n```\n\n### Export formats\n\nThere are different export formats available:\n\n+ ```module.exports``` (default, cjs format). \"Hello world\" becomes ```module.exports = \"Hello world\";```\n+ ```exports.default``` (when ```exportAsDefault``` param is set, es6to5 format). \"Hello world\" becomes ```exports.default = \"Hello world\";```\n+ ```export default``` (when ```exportAsEs6Default``` param is set, es6 format). \"Hello world\" becomes ```export default \"Hello world\";```\n\n### Advanced options\n\nIf you need to pass [more advanced options](https://github.com/webpack/html-loader/pull/46), especially those which cannot be stringified, you can also define an `htmlLoader`-property on your `webpack.config.js`:\n\n```js\nvar path = require('path')\n\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.html$/,\n        use: [ \"html-loader\" ]\n      }\n    ]\n  },\n  htmlLoader: {\n    ignoreCustomFragments: [/\\{\\{.*?}}/],\n    root: path.resolve(__dirname, 'assets'),\n    attrs: ['img:src', 'link:href']\n  }\n};\n```\n\nIf you need to define two different loader configs, you can also change the config's property name via `html-loader?config=otherHtmlLoaderConfig`:\n\n```js\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.html$/,\n        use: [ \"html-loader?config=otherHtmlLoaderConfig\" ]\n      }\n    ]\n  },\n  otherHtmlLoaderConfig: {\n    ...\n  }\n};\n```\n\n### Export into HTML files\n\nA very common scenario is exporting the HTML into their own _.html_ file, to\nserve them directly instead of injecting with javascript. This can be achieved\nwith a combination of 3 loaders:\n\n- [file-loader](https://github.com/webpack/file-loader)\n- [extract-loader](https://github.com/peerigon/extract-loader)\n- html-loader\n\nThe html-loader will parse the URLs, require the images and everything you\nexpect. The extract loader will parse the javascript back into a proper html\nfile, ensuring images are required and point to proper path, and the file loader\nwill write the _.html_ file for you. Example:\n\n```js\n{\n  test: /\\.html$/,\n  use: [ 'file-loader?name=[path][name].[ext]!extract-loader!html-loader' ]\n}\n```\n\n<h2 align=\"center\">Maintainers</h2>\n\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\">\n        <img width=\"150\" height=\"150\"\n        src=\"https://avatars.githubusercontent.com/u/18315?v=3\">\n        </br>\n        <a href=\"https://github.com/hemanth\">Hemanth</a>\n      </td>\n      <td align=\"center\">\n        <img width=\"150\" height=\"150\"\n        src=\"https://avatars.githubusercontent.com/u/8420490?v=3\">\n        </br>\n        <a href=\"https://github.com/d3viant0ne\">Joshua Wiens</a>\n      </td>\n      <td align=\"center\">\n        <img width=\"150\" height=\"150\" src=\"https://avatars.githubusercontent.com/u/5419992?v=3\">\n        </br>\n        <a href=\"https://github.com/michael-ciniawsky\">Michael Ciniawsky</a>\n      </td>\n      <td align=\"center\">\n        <img width=\"150\" height=\"150\"\n        src=\"https://avatars.githubusercontent.com/u/6542274?v=3\">\n        </br>\n        <a href=\"https://github.com/imvetri\">Imvetri</a>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\">\n        <img width=\"150\" height=\"150\"\n        src=\"https://avatars.githubusercontent.com/u/1520965?v=3\">\n        </br>\n        <a href=\"https://github.com/andreicek\">Andrei CrnkoviÄ‡</a>\n      </td>\n      <td align=\"center\">\n        <img width=\"150\" height=\"150\"\n        src=\"https://avatars.githubusercontent.com/u/3367801?v=3\">\n        </br>\n        <a href=\"https://github.com/abouthiroppy\">Yuta Hiroto</a>\n      </td>\n      <td align=\"center\">\n        <img width=\"150\" height=\"150\" src=\"https://avatars.githubusercontent.com/u/80044?v=3\">\n        </br>\n        <a href=\"https://github.com/petrunov\">Vesselin Petrunov</a>\n      </td>\n      <td align=\"center\">\n        <img width=\"150\" height=\"150\"\n        src=\"https://avatars.githubusercontent.com/u/973543?v=3\">\n        </br>\n        <a href=\"https://github.com/gajus\">Gajus Kuizinas</a>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n[npm]: https://img.shields.io/npm/v/html-loader.svg\n[npm-url]: https://npmjs.com/package/html-loader\n\n[deps]: https://david-dm.org/webpack/html-loader.svg\n[deps-url]: https://david-dm.org/webpack/html-loader\n\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n\n[test]: http://img.shields.io/travis/webpack/html-loader.svg\n[test-url]: https://travis-ci.org/webpack/html-loader\n\n[cover]: https://codecov.io/gh/webpack/html-loader/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack/html-loader\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/webpack/html-loader.git"
  },
  "scripts": {
    "beautify": "beautify-rewrite lib/**/*.js hot/**/*.js bin/**/*.js benchmark/*.js test/*.js",
    "beautify-lint": "beautify-lint lib/**/*.js hot/**/*.js bin/**/*.js benchmark/*.js test/*.js",
    "cover": "istanbul cover -x *.runtime.js node_modules/mocha/bin/_mocha",
    "lint": "eslint lib bin hot",
    "postcover": "npm run lint && npm run beautify-lint",
    "pretest": "npm run lint && npm run beautify-lint",
    "publish-patch": "npm run lint && npm run beautify-lint && mocha && npm version patch && git push && git push --tags && npm publish",
    "test": "mocha --harmony --full-trace --check-leaks",
    "travis": "npm run cover -- --report lcovonly"
  },
  "version": "0.4.5"
}
